
package interfaces;

import archivo.ArchivoBinarioMuestra;
import archivo.ManejoArchivotxtPlanoPatronMuestra;
import ipc_quimik.Muestra;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Omar
 */
public class CrearMuestra extends javax.swing.JFrame {
    
    Administrador ventanaAdmin;
    String filePath; //En esta variable guardaremos la ruta del archivo CSV del botón "Cargar Patrón"
    /**
     * Creates new form CrearMuestra
     */
    public CrearMuestra(Administrador ventanaAdmin) {
        initComponents();
        filePath = "";
        this.ventanaAdmin = ventanaAdmin;
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitulo = new javax.swing.JLabel();
        labelCodigo = new javax.swing.JLabel();
        labelDescripcion = new javax.swing.JLabel();
        labelPatron = new javax.swing.JLabel();
        txtCodigoCrearMuestra = new javax.swing.JTextField();
        txtDescripcionCrearMuestra = new javax.swing.JTextField();
        btnCargarPatron = new javax.swing.JButton();
        btnCrearMuestra = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear Muestra");

        labelTitulo.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitulo.setText("Crear Muestra");

        labelCodigo.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        labelCodigo.setText("Código:");

        labelDescripcion.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        labelDescripcion.setText("Descripción:");

        labelPatron.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        labelPatron.setText("Patrón:");

        btnCargarPatron.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        btnCargarPatron.setText("Cargar Patrón");
        btnCargarPatron.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarPatronActionPerformed(evt);
            }
        });

        btnCrearMuestra.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        btnCrearMuestra.setText("Crear");
        btnCrearMuestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearMuestraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPatron, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodigoCrearMuestra)
                            .addComponent(txtDescripcionCrearMuestra)
                            .addComponent(btnCargarPatron, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(btnCrearMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(labelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCodigoCrearMuestra, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(labelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDescripcionCrearMuestra)
                    .addComponent(labelDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelPatron, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnCargarPatron, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addComponent(btnCrearMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Este botón asignará la ruta del archivo donde está el patrón de la muestra, en la variable "filePath"
    private void btnCargarPatronActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarPatronActionPerformed
        //Con el "JFileChooser" le damos la orden que se abra la ventana del archivo
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this); //Con "showOpenDialog" Aparece un cuadro de diálogo de selección de archivos "cargar archivo".
        
        //Condición
        if(seleccion == JFileChooser.APPROVE_OPTION) {//Comparamos las acciones almacenadas en la variable selección, y sólo si escojió un arhivo ejecuta las siguientes instrucciones:
            filePath = fileChooser.getSelectedFile().getAbsolutePath(); //Para obtener el Path, definimos de tipo string la variable "filePath"
            System.out.println("La ruta del archivo es: " + filePath);
        }
        
    }//GEN-LAST:event_btnCargarPatronActionPerformed

    private void btnCrearMuestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearMuestraActionPerformed
        String rutaPatronMuestra = "";
        rutaPatronMuestra = ("Muestra_"+txtCodigoCrearMuestra.getText()+".html");
        //Instanciamos nuestro manejador de archivos Binarios y con el metodo agregarContenido almacenamos el objeto de tipo Muestra.
        ArchivoBinarioMuestra archivo = new ArchivoBinarioMuestra();
        //Primero Guardamos en un ArrayList las muestras en caso un archivo binario ya exista
        ArrayList<Muestra> muestras = archivo.obtenerContenido("muestras.bin");
        //Validamos que no hayan campos de texto vacíos y que el código no exista ya
        ManejoArchivotxtPlanoPatronMuestra archivoCSV = new ManejoArchivotxtPlanoPatronMuestra();
        if((txtCodigoCrearMuestra.getText().length() != 0) && (txtDescripcionCrearMuestra.getText().length() != 0)) {
            if(muestras.size()== 0) {
                guardarNuevaMuestra(archivo); //Si no hay investigadores, simplemente guardamos la nueva muestra
                archivoCSV.crearArchivo(rutaPatronMuestra);
                archivoCSV.leerCSVpatron(filePath, rutaPatronMuestra);
            }
            else{ //Si existen muestras debemos recorrer el arreglo para validar que el código sea único
                boolean codigoExiste = false;
                for (Muestra muest : muestras) {
                    if(muest.getCodigo().equals(txtCodigoCrearMuestra.getText())){
                       codigoExiste = true; 
                    }
                }
                if(codigoExiste) {
                    JOptionPane.showMessageDialog(this, "El código ya existe");
                }
                else{
                    guardarNuevaMuestra(archivo);
                    archivoCSV.crearArchivo(rutaPatronMuestra);
                    archivoCSV.leerCSVpatron(filePath, rutaPatronMuestra);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Falta información");
        }
    }//GEN-LAST:event_btnCrearMuestraActionPerformed
    
    //Procedimiento que guarda la nueva Muestra en el archivo Binario recibiendo el archivo instanciado previamente
    private void guardarNuevaMuestra(ArchivoBinarioMuestra archivo){
        archivo.agregarContenido("muestras.bin", new Muestra(txtCodigoCrearMuestra.getText(),txtDescripcionCrearMuestra.getText(), "Ingreso"));

        //Ahora limpiamos los campos de texto:
        txtCodigoCrearMuestra.setText("");
        txtDescripcionCrearMuestra.setText("");
        this.ventanaAdmin.actualizarTablaMuestras(); //Actualizamos la tabla de muestras en la ventana administrador 
    }
    
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarPatron;
    private javax.swing.JButton btnCrearMuestra;
    private javax.swing.JLabel labelCodigo;
    private javax.swing.JLabel labelDescripcion;
    private javax.swing.JLabel labelPatron;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JTextField txtCodigoCrearMuestra;
    private javax.swing.JTextField txtDescripcionCrearMuestra;
    // End of variables declaration//GEN-END:variables
}
